diff --git a/Registration.cpp b/Registration.cpp
index c6a4c5e..316d5c2 100644
--- Registation.cpp
+++ Registation.cpp
@@ -34,107 +34,39 @@ static std::vector<SoapySDR::Kwargs> findAirspy(const SoapySDR::Kwargs &args)
     airspy_lib_version_t asVersion;
     airspy_lib_version(&asVersion);
     
-    // SoapySDR_setLogLevel(SOAPY_SDR_DEBUG);
-    
     SoapySDR_logf(SOAPY_SDR_DEBUG, "AirSpy Lib v%d.%d rev %d", asVersion.major_version, asVersion.minor_version, asVersion.revision);
 
-    int numDevices = 0;
-   
-    std::vector< struct airspy_device * > foundDevices;
-   
-    int status = 0;
-   
-    // if (args.count("serial") != 0) {
-    //     std::stringstream serialstr;
-    //
-    //     uint32_t serialNum[2];
-    //     std::string serial_in(args.at("serial"));
-    //     std::replace( serial_in.begin(), serial_in.end(), ':', ' ');
-    //     serialstr.str(serial_in);
-    //     serialstr << std::hex;
-    //     serialstr >> serialNum[0];
-    //     serialstr >> serialNum[1];
-    //
-    //     uint64_t serial64 = ((uint64_t) serialNum[0] << 32) | serialNum[1]);
-    //
-    //     SoapySDR_logf(SOAPY_SDR_DEBUG, "Serial? '%s' %u %u 64: %llu", serialstr.str().c_str(), serialNum[0], serialNum[1], serial64);
-    //
-    //     struct airspy_device *searchDev = nullptr;
-    //     status = airspy_open_sn(&searchDev, serial64);
-    //
-    //     SoapySDR_logf(SOAPY_SDR_DEBUG, "Search done..");
-    //
-    //     if (status == AIRSPY_SUCCESS) {
-    //         foundDevices.push_back(searchDev);
-    //     } else {
-    //         SoapySDR_logf(SOAPY_SDR_DEBUG, "Error finding by serial..");
-    //     }
-    // } else
-    {    
-        for (int i = 0, iMax = MAX_DEVICES; i < iMax; i++) {
-            struct airspy_device *searchDev = nullptr;
-            status = airspy_open(&searchDev);
-        
-            if (status != AIRSPY_SUCCESS) {
-                break;
-            }
-        
-            foundDevices.push_back(searchDev);
-        }
+    uint64_t serials[MAX_DEVICES];
+    int count = airspy_list_devices(serials, MAX_DEVICES);
+    if (count < 0) {
+        SoapySDR_logf(SOAPY_SDR_ERROR, "libairspy error listing devices");
+        return results;
     }
-   
-    SoapySDR_logf(SOAPY_SDR_DEBUG, "%d AirSpy boards found.", foundDevices.size());
-    int devId = 0;
-    
-    for (std::vector< struct airspy_device * >::iterator i = foundDevices.begin(); i != foundDevices.end(); i++) {
-        uint8_t id = AIRSPY_BOARD_ID_INVALID;
-        airspy_read_partid_serialno_t serial;
-        
-        status = airspy_board_id_read(*i, &id);
-		if (status != AIRSPY_SUCCESS) {
-            continue;
-		}
-        
-		status = airspy_board_partid_serialno_read(*i, &serial);
-		if (status != AIRSPY_SUCCESS) {
-			continue;
-		}
 
-        std::string boardName(airspy_board_id_name((enum airspy_board_id)id));
+    SoapySDR_logf(SOAPY_SDR_DEBUG, "%d AirSpy boards found.", count);
+    
+    for (int i = 0; i < count; i++) {
         std::stringstream serialstr;
         
         serialstr.str("");
-        serialstr << std::hex << serial.serial_no[2] << ":" << serial.serial_no[3];
+        serialstr << std::hex << serials[i];
         
         SoapySDR_logf(SOAPY_SDR_DEBUG, "Serial %s", serialstr.str().c_str());        
 
         SoapySDR::Kwargs soapyInfo;
 
-        soapyInfo["device_id"] = std::to_string(devId);
-        soapyInfo["label"] = boardName + " [" + serialstr.str() + "]";
+        soapyInfo["label"] = "AirSpy One [" + serialstr.str() + "]";
         soapyInfo["serial"] = serialstr.str();
-        devId++;
-                
-        // if (args.count("serial") != 0) {
-        //     if (args.at("serial") != soapyInfo.at("serial")) {
-        //         continue;
-        //     }
-        //     SoapySDR_logf(SOAPY_SDR_DEBUG, "Found device by serial %s", soapyInfo.at("serial").c_str());
-        // } else
-        if (args.count("device_id") != 0) {
-            if (args.at("device_id") != soapyInfo.at("device_id")) {
+
+        if (args.count("serial") != 0) {
+            if (args.at("serial") != soapyInfo.at("serial")) {
                 continue;
             }
-            SoapySDR_logf(SOAPY_SDR_DEBUG, "Found device by device_id %s", soapyInfo.at("device_id").c_str());
+            SoapySDR_logf(SOAPY_SDR_DEBUG, "Found device by serial %s", soapyInfo.at("serial").c_str());
         }
-        
+
         results.push_back(soapyInfo);
     }
-   
-    for (std::vector< struct airspy_device * >::iterator i = foundDevices.begin(); i != foundDevices.end(); i++) {
-        airspy_close(*i);
-    }
-
     return results;
 }
 
diff --git a/Settings.cpp b/Settings.cpp
index dd87a5d..ec090ff 100644
--- Settings.cpp
+++ Settings.cpp
@@ -26,8 +26,6 @@
 
 SoapyAirspy::SoapyAirspy(const SoapySDR::Kwargs &args)
 {
-    deviceId = -1;
-
     sampleRate = 3000000;
     centerFrequency = 0;
 
@@ -47,51 +45,30 @@ SoapyAirspy::SoapyAirspy(const SoapySDR::Kwargs &args)
 
     lnaGain = mixerGain = vgaGain = 0;
 
-    if (args.count("device_id") != 0)
+    dev = nullptr;
+    std::stringstream serialstr;
+    serialstr.str("");
+
+    if (args.count("serial") != 0)
     {
         try {
-            deviceId = std::stoi(args.at("device_id"));
+            serial = std::stoull(args.at("serial"), nullptr, 16);
         } catch (const std::invalid_argument &) {
-            throw std::runtime_error("device_id invalid.");
-        }
-
-        std::vector<struct airspy_device *> allDevs;
-
-        int status;
-        for (int i = 0, iMax = deviceId; i <= iMax; i++) {
-            struct airspy_device *searchDev = nullptr;
-            status = airspy_open(&searchDev);
-
-            if (status != AIRSPY_SUCCESS) {
-                continue;
-            }
-
-            allDevs.push_back(searchDev);
-        }
-
-        int numDevices = allDevs.size();
-
-        if (deviceId < 0 || deviceId >= numDevices) {
-            for (std::vector< struct airspy_device * >::iterator i = allDevs.begin(); i != allDevs.end(); i++) {
-                airspy_close(*i);
-            }
-
-            throw std::runtime_error("Airspy device_id out of range [0 .. " + std::to_string(numDevices) + "].");
+            throw std::runtime_error("serial is not a hex number");
+        } catch (const std::out_of_range &) {
+            throw std::runtime_error("serial value of out range");
         }
-
-        dev = allDevs[deviceId];
-
-        for (std::vector< struct airspy_device * >::iterator i = allDevs.begin(); i != allDevs.end(); i++) {
-            if (*i != dev) {
-                airspy_close(*i);
-            }
+        serialstr << std::hex << serial;
+        if (airspy_open_sn(&dev, serial) != AIRSPY_SUCCESS) {
+            throw std::runtime_error("Unable to open AirSpy device with serial " + serialstr.str());
         }
-
-        SoapySDR_logf(SOAPY_SDR_DEBUG, "Found Airspy device using 'device_id' = %d", deviceId);
+        SoapySDR_logf(SOAPY_SDR_DEBUG, "Found AirSpy device: serial = %16Lx", serial);
     }
-
-    if (deviceId == -1) {
-        throw std::runtime_error("device_id missing.");
+    else
+    {
+        if (airspy_open(&dev) != AIRSPY_SUCCESS) {
+            throw std::runtime_error("Unable to open AirSpy device");
+        }
     }
 
     //apply arguments to settings when they match
@@ -127,8 +104,10 @@ SoapySDR::Kwargs SoapyAirspy::getHardwareInfo(void) const
     //this also gets printed in --probe
     SoapySDR::Kwargs args;
 
-    args["origin"] = "https://github.com/pothosware/SoapyAirspy";
-    args["device_id"] = std::to_string(deviceId);
+    std::stringstream serialstr;
+    serialstr.str("");
+    serialstr << std::hex << serial;
+    args["serial"] = serialstr.str();
 
     return args;
 }
diff --git a/SoapyAirspy.hpp b/SoapyAirspy.hpp
index 555afcb..5686139 100644
--- SoapyAirspy.hpp
+++ SoapyAirspy.hpp
@@ -206,7 +206,7 @@ class SoapyAirspy: public SoapySDR::Device
 private:
 
     //device handle
-    int deviceId;
+    uint64_t serial;
     struct airspy_device *dev;
 
     //cached settings
